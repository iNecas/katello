<%= javascript_tag do %>

$(function() {
    var KT_AK_LABEL = "<%= kt_ak_label %>";
    var availableActivationKeys = {};

    function ktLoadActivationKeys() {
        $("#ak-subscriptions-info").hide();
        $("#ak-subscriptions-spinner").show();
        var url = foreman_url('/activation_keys');
        var environmentId = $("#kt_environment_id").val();
        if(environmentId) {
            $.ajax({
                type: 'get',
                url:  url,
                data:'environment_id=' + environmentId,
                success: function(response) {
                    availableActivationKeys = response;
                },
                error: function(error) {
                    $.jnotify("Error while loading activation keys from Katello", { type: "error", sticky: true });
                },
                complete: function() {
                    ktAkUpdateSubscriptionsInfo();
                }
            });
        } else {
            availableActivationKeys = {};
            ktAkUpdateSubscriptionsInfo();
        }
    }

    function ktFindParamContainer(name){
        var ret;
        $("div#parameters div.control-group input[ type = 'text']").each(function () {
            element = $(this);
            if(element.val() == name) {
                ret = element.parent();
                return false;
            }
        });
        return ret;
    }

    function ktOrganizations() {
        return $.grep($("#organizations label.organization"), function (el) {
            return $(el).text().trim().match(/^kt-/)
        });
    }

    function ktParseOrgName(frOrgName) {
        return frOrgName.match(/^kt-\[(.*)\]\[(.*)\]$/);
    }

    function ktHideParams() {
        var paramsToHide = [ktFindParamContainer(KT_AK_LABEL),
                            ktFindParamContainer('kt_org'),
                            ktFindParamContainer('kt_env')];
        $.each(paramsToHide, function (i, paramContainer) {
            if(paramContainer) {
                paramContainer.hide();
            }
        });
    }

    function ktOrganizationsToKtEnv() {
        var ktOrgs = [], ktOrgsToEnvs = [], selectedEnvId;
        var ktEnvironmentSelect = $("#kt_environment_id");
        $.each(ktOrganizations(), function (i, label) {
            var input = $(label).find("input[ type = 'checkbox' ]");
            var frOrgName = $(label).text().trim();
            var frOrgId = input.val();
            var match = ktParseOrgName(frOrgName);
            if(match) {
                if(input.attr('checked')) {
                    selectedEnvId = frOrgId;
                }
                var ktOrg = match[1]; ktEnv = match[2];
                if(ktOrgs.indexOf(ktOrg) == -1) {
                    ktOrgs.push(ktOrg);
                    ktOrgsToEnvs[ktOrg] = [];
                }
                ktOrgsToEnvs[ktOrg].push([frOrgId, ktEnv]);
            }
            $(this).parent().hide();
        });

        ktEnvironmentSelect.empty();
        var content = '<option value=""></option>';
        $.each(ktOrgs, function (i, org) {
            content += '<optgroup label="' + org + '">';
            $.each(ktOrgsToEnvs[org], function (j, env) {
                // we don't quotre the value beacuse of deface bug
                content += '<option value=';
                content += env[0];

                if(env[0] == selectedEnvId) {
                    content += " selected";
                }
                content += '>' + env[1] + '</option>';
            });
            content += '</optgroup>';
        });
        ktEnvironmentSelect.append(content);

    }

    function ktSelectedOrgAndEnv() {
        var selectedEnvId = $("#kt_environment_id").val();
        var orgCheckbox = $("#organizations label.organization input[ type = 'checkbox' ][ value = '" + selectedEnvId + "' ]");
        if(orgCheckbox) {
            return ktParseOrgName(orgCheckbox.parent().text().trim());
        }
    }

    function ktSetParam(name, value) {
        var paramContainer = ktFindParamContainer(name);
        if(value) {
            if(! paramContainer) { // we create the param for kt_activation_keys
                $("div#parameters a.btn-success").click();
                paramContainer = $("div#parameters div.control-group").last();
                paramContainer.find("input").val(name);
            }
            paramContainer.find("textarea").val(value);
        } else if(paramContainer) {
            // we remove the param by setting destoy to 1
            paramContainer.find("input[ type = 'hidden' ]").val(1);
        }

    }

    function ktEnvToParam() {
        var orgAndEnv = ktSelectedOrgAndEnv() || [];
        ktSetParam('kt_org', orgAndEnv[1]);
        ktSetParam('kt_env', orgAndEnv[2]);
    }

    function ktEnvToFrOrganizations() {
        var selectedEnvId = $("#kt_environment_id").val();
        $.each(ktOrganizations(), function (i, label) {
            var input = $(label).find("input[ type = 'checkbox' ]");
            if(selectedEnvId == input.val()) {
                input.prop("checked", true);
            } else {
                input.prop("checked", false);
            }
        });
    }

    function ktParamToAkInput() {
        var paramContainer = ktFindParamContainer(KT_AK_LABEL);
        if(paramContainer) {
            $("#kt_activation_keys").val(paramContainer.find("textarea").val());
        }
    }

    function ktAkInputToParam() {
        var ktActivationKeysValue = $("#kt_activation_keys").val().replace(/,\s*/g,",").replace(/,$/g,"");
        ktSetParam(KT_AK_LABEL, ktActivationKeysValue);
    }

    function ktAkUpdateSubscriptionsInfo() {
        var subsInfo = $("ul#ak-subscriptions-info");
        subsInfo.empty();
        var selectedKeys = $("#kt_activation_keys").val().split(/,\s*/);
        $.each(selectedKeys, function(i, key) {
          if(availableActivationKeys[key]) {
            // hack to make it working with deface
            var ul = "<ul>", ul_end = "</ul>", li = "<li>", li_end = "</li>";
            content = li + key + ul;
            if(!availableActivationKeys[key].length == 0) {
                content += li;
                content += availableActivationKeys[key].join(li_end + li);
                content += li_end;
            }
            content +=  ul_end + li_end;
            subsInfo.append(content);
          }
        });
        $("#ak-subscriptions-info").show();
        $("#ak-subscriptions-spinner").hide();
    }

    function ktOnLoad() {
        ktHideParams();
        ktParamToAkInput();
        ktOrganizationsToKtEnv();
        ktLoadActivationKeys();
    };

    function ktOnSubmit() {
        ktAkInputToParam();
        ktEnvToParam();
        ktEnvToFrOrganizations();
    }


    $("#kt_activation_keys").parents("form").submit(ktOnSubmit);

    ktOnLoad();

    $("#kt_activation_keys").autocomplete({
        minLength: 0,
        source: function(request, response) {
            var terms = request.term.split(/,\s*/);
            var part = terms.pop();
            var items = []
            for(key in availableActivationKeys) {
                if(terms.indexOf(key) == -1) {
                    items.push(key);
                }
            }
            response($.ui.autocomplete.filter(
                items, part));
        },
        focus: function() {
            // prevent value inserted on focus
            return false;
        },
        select: function(event, ui) {
            var oldTerms = this.value.replace(/[^, ][^,]*$/,"");
            this.value = oldTerms + ui.item.value;
            ktAkUpdateSubscriptionsInfo();
            return false;
        },
        close: function() {
            ktAkUpdateSubscriptionsInfo();
        }

    }).bind("focus", function(event) {
        if($(this)[0].value == "") {
	    $(this).autocomplete( "search" );
        }});

    $("#kt_environment_id").change(ktLoadActivationKeys);

    $("#ak_refresh_subscriptions").click(function () {
        ktLoadActivationKeys();
        return false;
    });

});

<% end %>
<div class="tab-pane" id="katello">
  <%= field(nil, "Katello Environment", :help_inline => "the names of Katello organization and environment will be available in templates as @host.params['kt_org'] and @host.params['kt_env']") do
    select_tag(:kt_environment_id, [])
  end %>
  <%= field(nil, "Activation Keys", :help_inline => "comma separated values. The value will be available in templates as @host.params['#{kt_ak_label}']") do
    text_field_tag("kt_activation_keys", "", :style => 'width: 98%')
  end %>
  <div class="alert alert-info">
    <p><b>Subscriptions information based on selected activation keys:</b></p>
    <ul id="ak-subscriptions-info">
    </ul>
    <div id="ak-subscriptions-spinner" style="display: none">
      <%= image_tag "spinner.gif" %>
    </div>
    <p>Activation keys and subscriptions can be managed
      <b><a href="<%= Setting['katello_url'] %>/activation_keys" target="_blank">here</a></b>
    </p>
    <p><a href="" id="ak_refresh_subscriptions">Reload data from Katello</a></p>
  </div>
</div>
